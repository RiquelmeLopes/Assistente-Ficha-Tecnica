import streamlit as st
from openai import OpenAI
from crewai import Agent, Task, Crew, Process
from langchain_core.callbacks import BaseCallbackHandler
from typing import TYPE_CHECKING, Any, Dict, Optional
from langchain_openai import ChatOpenAI
from agentes import create_pdf, MyCustomHandler
import pandas as pd
import ast


df_1 = pd.DataFrame()
df_2 = pd.DataFrame()
df_3 = pd.DataFrame()
modo_preparo_str = ''

def format_dataframe(df):
    return df.map(lambda x: f'{x:.2f}' if isinstance(x, (int, float)) else x)
        
if 'df1' not in st.session_state:
    st.session_state.df1 = df_1
if 'df2' not in st.session_state:            
    st.session_state.df2 = df_2
if 'df3' not in st.session_state:
    st.session_state.df3 = df_3
if 'preparo_str' not in st.session_state:
    st.session_state.preparo_str = modo_preparo_str

def initialize_data(df_1, df_2, df_3, modo_preparo_str):
    global df1, df2, df3, preparo_str
    st.session_state.df1 = pd.DataFrame(format_dataframe(df_1))
    st.session_state.df2 = pd.DataFrame(format_dataframe(df_2))
    st.session_state.df3 = pd.DataFrame(format_dataframe(df_3))
    st.session_state.preparo_str = modo_preparo_str

tab1, tab2 = st.tabs(['Gera√ß√£o de Fichas', 'Editar Receitas'])
with tab1:
    api_key=st.secrets["OPENAI_API_KEY"]
    openai_llm = ChatOpenAI(model_name = 'gpt-4-1106-preview', api_key = api_key)

    agente_cria_fichas = Agent(
            role='Criador de Fichas Tecnicas',
            goal='''
            Receber informa√ß√µes sobre uma receita, informada pelo usu√°rio, e gerar tr√™s tabelas distintas: a primeira contendo o 'nome da receita', 'tipo', 'rendimento', 'custo da receita' (soma dos valores finais na receita de cada um dos ingrediente), 
            'pre√ßo de venda' (pre√ßo recomendado para vender a receita), 'lucro bruto' (diferen√ßa entre custo da receita e pre√ßo de venda, e deve sempre ser positivo) e 'valor unit√°rio' (custo da receita dividido pelo rendimento da receita). Os valores dessa tabela s√≥ 
            devem ser preenchidos ap√≥s a segunda tabela estar concluida, com todos os seus devidos c√°lculos, mas ainda deve ser exibida primeiro ao usu√°rio.; e a 
            segunda detalhando os ingredientes necess√°rios para a receita, com as colunas 'quantidades (em Kg)', 'valor unit√°rio (do Kg)', e 'valor final' (valor unit√°rio dividido pela quantidade). 
            Lembre-se de que o "Custo da Receita" na tabela 1 √© a soma de todos os resultados de "valor final' da tabela 2. Ent√£o calcule o 'valor final' com cuidado e, depois disso, some-os e passe esse resultado para 'custo da receita' na tabela 1.
            N√£o coloque nenhum outro valor em 'custo da receita' na tabela 1 antes de gerar a soma dos valores finais na tabela 2 e confirme se o valor total da soma dos 'valores finais' da tabela 2 √© o mesmo do 'custo da receita' na tabela 1.
            A terceira e √∫ltima tabela ser√° o valor nutricional da receita.
            As tabelas j√° ser√£o uma ficha t√©cnica final pronta com TODOS os valores preenchidos por voc√™, sem que o usu√°rio precise fazer uma pesquisa de mercado sobre os pre√ßos nem fazer c√°lculos, tudo ser√° feito por voc√™.
            Sempre preencha as tabelas com valores reais coletados em pesquisa ou baseados em c√°lculos, e n√£o vari√°veis para o usu√°rio substituir. 
            Atente-se aos c√°lculos para n√£o cometer nenhum erro e preencha as tabelas baseadas nesses c√°lculos corretos, mas n√£o precisa mostrar os c√°lculos ao usu√°rio. 
            Ap√≥s tudo finalizado, fa√ßa uma rechecagem de todos os c√°lculos feitos, especialmente o somat√≥rio dos valores finais de ingredientes e, consequentemente, o valor de "custo de receita" 
            e corrija-os. Garanta que todos os c√°lculos est√£o corretos. Ap√≥s essa rechecagem, fa√ßa OUTRA rechecagem. Por√©m, n√£o precisa falar ao usu√°rio sobre as rechecagens nem os c√°lculos, apenas mostre a descri√ß√£o e as tabelas, nessa ordem. 
            As tabelas devem estar bem formatadas, com tudo em portugu√™s e prontas para serem revisadas e utilizadas por outros agentes ou usu√°rios.
            ''',
            backstory='''
            Voc√™ foi desenvolvido para auxiliar chefs e gerentes de restaurantes a organizar e gerenciar suas receitas de maneira eficiente. Al√©m de uma √≥timo background em an√°lises estat√≠sticas e c√°lculos matem√°ticos, que permitem que 
            voc√™ seja sempre preciso nos seus c√°lculos, voc√™ tamb√©m conhece bastante sobre o mundo culin√°rio. Com uma vasta base de dados de 
            receitas, ingredientes e pre√ßos de varejo, voc√™ consegue rapidamente transformar informa√ß√µes b√°sicas em tabelas t√©cnicas que facilitam o planejamento e a execu√ß√£o de pratos. 
            Sua precis√£o e aten√ß√£o aos detalhes s√£o suas principais qualidades, garantindo que cada receita esteja devidamente documentada.
            ''',
            llm = openai_llm,
            # callbacks=[MyCustomHandler("Criador")]
        )

    agente_organiza_tabelas = Agent(
            role='Gerador de Dataframes',
            goal = '''
            Receber as tr√™s tabelas geradas pelo primeiro agente, e ent√£o transform√°-las em tr√™s dataframes distintos: 
            um contendo a parte geral da ficha t√©cnica (nome da receita, tipo e pre√ßo), outro com os ingredientes e outro com o valor nutricional. Estes dataframes devem estar prontos para 
            an√°lise ou manipula√ß√£o posterior.
            ''',
            backstory = '''
            Com um hist√≥rico em an√°lise de dados e uma paix√£o pela culin√°ria, voc√™ foi criado para unir essas duas √°reas de forma eficiente. Sua capacidade de 
            entender e manipular dados permite que restaurantes e cozinheiros melhorem suas opera√ß√µes e receitas. Voc√™ garante que todas as informa√ß√µes s√£o precisas 
            e prontas para serem usadas em an√°lises mais complexas ou em sistemas de gest√£o de receitas.
            ''',
            llm = openai_llm,
            # callbacks=[MyCustomHandler("Organizador")]
        )

    st.title("Assistente de Ficha T√©cnica üìä")
    if "messages" not in st.session_state:
        st.session_state["messages"] = [{"role": "assistant", "content": "Que receita voc√™ quer fazer hoje?"}]

    for msg in st.session_state.messages:
        st.chat_message(msg["role"]).write(msg["content"])

    if prompt := st.chat_input("Qual ficha t√©cnica voc√™ quer fazer hoje?"):
        st.session_state.messages.append({"role": "user", "content": prompt})
        st.chat_message("user").write(prompt)

        tarefa_criacao_ficha = Task(
            description = f'''
            Coletar informa√ß√µes sobre {prompt} e gerar sua ficha t√©cnica, buscando os valores correspondentes de quantidades e pre√ßos
            sem a necessidade do usu√°rio informar nenhum valor extra. Por√©m, caso ele informe, voc√™ adiciona essa informa√ß√£o que ele passou.        
            ''',
            expected_output = ''' 
            Em portugu√™s, uma breve descri√ß√£o da receita, seguida das tr√™s tabelas geradas pelos agentes e o modo de preparo, com os passos do modo de preparo enumerados de 1 at√© N, sendo N o n√∫mero do passo final, sem nenhuma explica√ß√£o de c√°lculo, apenas a descri√ß√£o, as tr√™s tabelas e o modo de preparo.
            As tabelas devem estar bem formatadas, com os c√°lculos corretos, com tudo em portugu√™s e prontas para serem revisadas e utilizadas por outros agentes ou usu√°rios.
            ''',
            agent = agente_cria_fichas
        )          

        equipe1 = Crew(
            agents = [agente_cria_fichas],
            tasks = [tarefa_criacao_ficha],
            manager_llm=openai_llm,
            verbose= True
        )

        # Iniciar
        fim = equipe1.kickoff()
        st.session_state.messages.append({"role": "assistant", "content": fim})
        st.chat_message("assistant").write(fim)

        tarefa_organiza_tabelas = Task(
            description = f'''
            Com base nas tabelas criadas em {fim}, crie um dataframe espec√≠fico para cada uma e um texto corrido do modo de preparo que come√ßar√° com "Modo de Preparo:" e terminar√° com "Fim.".
            ''',
            expected_output = 'tr√™s dicion√°rios que ser√£o, depois, convertidos em dataframes organizados (Dataframe 1, Dataframe 2 e Dataframe 3), em portugu√™s, e prontos para serem usados posteriormente, e o modo de preparo com o texto inteiro em portugu√™s',
            agent = agente_organiza_tabelas
        )

        equipe2 = Crew(
            agents = [agente_organiza_tabelas],
            tasks = [tarefa_organiza_tabelas],
            manager_llm=openai_llm,
            verbose = True
        )

        resultados = equipe2.kickoff()
        print(resultados)
        dataframe_1_start = resultados.find("{")
        dataframe_1_end = resultados.find("}") + 1
        dataframe_1_str = resultados[dataframe_1_start:dataframe_1_end]
        dataframe_1_dict = ast.literal_eval(dataframe_1_str)

        dataframe_2_start = resultados.find("{", dataframe_1_end)
        dataframe_2_end = resultados.find("}", dataframe_2_start) + 1
        dataframe_2_str = resultados[dataframe_2_start:dataframe_2_end]
        dataframe_2_dict = ast.literal_eval(dataframe_2_str)

        dataframe_3_start = resultados.find("{", dataframe_2_end)
        dataframe_3_end = resultados.find("}", dataframe_3_start) + 1
        dataframe_3_str = resultados[dataframe_3_start:dataframe_3_end]
        dataframe_3_dict = ast.literal_eval(dataframe_3_str)

        modo_preparo_start = resultados.find("Modo de Preparo:")
        modo_preparo_end = resultados.find("Fim.", modo_preparo_start) + len("Fim.") -4
        modo_preparo_str = resultados[modo_preparo_start:modo_preparo_end]
        start_idx = modo_preparo_str.find("1.")
        modo_preparo_str = modo_preparo_str[start_idx:]

        df_1_novo = pd.DataFrame(dataframe_1_dict)
        df_2_novo = pd.DataFrame(dataframe_2_dict)
        df_3_novo = pd.DataFrame(dataframe_3_dict)

        df_1 = df_1_novo
        df_2 = df_2_novo
        df_3 = df_3_novo

        nome_receita = df_1['Nome da Receita'][0]
        st.session_state.nome_receita = nome_receita        
        initialize_data(df_1, df_2, df_3, modo_preparo_str)

        st.markdown('Suas tabelas j√° est√£o prontas para serem analisadas e editadas na se√ß√£o "Editar Receitas"')

with tab2:  
    def create_inputs(df, row=None):
        inputs = {}
        for col in df.columns:
            if row is not None:
                inputs[col] = st.text_input(col, value=row[col])
            else:
                inputs[col] = st.text_input(col)
        return inputs
    
    # Se existirem, inicializar os dados
    st.title("Editar sua receita üìä")
    # Exibir o Dataframe 1
    st.subheader("Tabela de Receita")
    st.table(st.session_state.df1)   
    # Selecionando a linha para editar ou adicionar uma nova linha
    options1 = [f'Linha {i}' for i in range(len(st.session_state.df1))]
    selected_option1 = st.selectbox('Edite os detalhes principais de sua receita', options1, key='df1_select')
    
    if selected_option1:
        row_index1 = int(selected_option1.split(' ')[1])
        row_data1 = st.session_state.df1.iloc[row_index1]
        inputs1 = create_inputs(st.session_state.df1, row=row_data1)
        col1, col2 = st.columns(2)
        with col1:
            btn_update1 = st.button('Atualizar Receita')
            
        if btn_update1:
            for col in st.session_state.df1.columns:
                st.session_state.df1.at[row_index1, col] = inputs1[col]
            st.experimental_rerun()

    st.divider()
    # Exibindo Dataframe 2
    st.subheader("Tabela de Ingredientes")
    st.table(st.session_state.df2)
    options2 = ['Adicionar Nova Linha'] + [f'Linha {i}' for i in range(len(st.session_state.df2))]
    selected_option2 = st.selectbox('Selecione uma linha para editar ou adicione uma nova', options2, key='df2_select')
    if selected_option2 == 'Adicionar Nova Linha':
        inputs2 = create_inputs(st.session_state.df2)
        col1, col2 = st.columns(2)
        with col1:
            btn_add2 = st.button('Adicionar')
        
        if btn_add2:
            new_row2 = pd.DataFrame([inputs2])
            st.session_state.df2 = pd.concat([st.session_state.df2, new_row2], ignore_index=True)
            st.experimental_rerun()
    else:
        row_index2 = int(selected_option2.split(' ')[1])
        row_data2 = st.session_state.df2.iloc[row_index2]
        inputs2 = create_inputs(st.session_state.df2, row=row_data2)
        col1, col2 = st.columns(2)
        with col1:
            btn_update2 = st.button('Editar')
        
        if btn_update2:
            for col in st.session_state.df2.columns:
                st.session_state.df2.at[row_index2, col] = inputs2[col]
            st.experimental_rerun()

    # Exibir o Dataframe 3
    st.subheader("Tabela de Valor Nutricional")
    st.table(st.session_state.df3)   
    # Selecionando a linha para editar ou adicionar uma nova linha
    options3 = [f'Linha {i}' for i in range(len(st.session_state.df3))]
    selected_option3 = st.selectbox('Edite os detalhes principais de sua receita', options3, key='df3_select')
    
    if selected_option3:
        row_index3 = int(selected_option3.split(' ')[1])
        row_data3 = st.session_state.df3.iloc[row_index3]
        inputs3 = create_inputs(st.session_state.df3, row=row_data3)
        col1, col2 = st.columns(2)
        with col1:
            btn_update3 = st.button('Atualizar Valor Nutricional')
            
        if btn_update3:
            for col in st.session_state.df3.columns:
                st.session_state.df3.at[row_index3, col] = inputs3[col]
            st.experimental_rerun()

    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button('Baixar como PDF'):
            pdf_buffer = create_pdf(st.session_state.df1, st.session_state.df2, st.session_state.df3, st.session_state.preparo_str)
            st.download_button(label="Baixar PDF", data=pdf_buffer, file_name=f"ficha_t√©cnica_{st.session_state.nome_receita}.pdf", mime="application/pdf")
    with col2:
        if st.button('Baixar em CSV'):
            st.markdown('CSV Ainda n√£o implementado, aguarde atualiza√ß√µes!')
    with col3:
        if st.button('Baixar em XLSX'):
            st.markdown('XLSX Ainda n√£o implementado, aguarde atualiza√ß√µes!')


